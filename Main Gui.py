# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\IsaWorking.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
#from PyQt5.QtGui import QFileDialog
from PyQt5.QtWidgets import QFileDialog
import sys
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import matplotlib.pyplot as plt
import random
import pandas as pd
from matplotlib.animation import FuncAnimation
import time
import numpy as np
from matplotlib.figure import Figure
import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1082, 849)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 80, 1000, 200))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 50, 101, 31))
        self.pushButton.setStyleSheet("")
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(390, 10, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(520, 10, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(290, 50, 101, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(400, 50, 101, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(510, 50, 101, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(940, 50, 111, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(840, 50, 93, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(520, 280, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(360, 280, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(400, 310, 101, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(940, 310, 121, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(290, 310, 101, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(20, 310, 101, 31))
        self.pushButton_10.setStyleSheet("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(510, 310, 101, 31))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(840, 310, 93, 31))
        self.pushButton_12.setObjectName("pushButton_12")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(20, 340, 1000, 200))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(520, 540, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(380, 540, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(400, 570, 101, 31))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(940, 570, 111, 31))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QtCore.QRect(290, 570, 101, 31))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setGeometry(QtCore.QRect(20, 570, 101, 31))
        self.pushButton_16.setStyleSheet("")
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_17.setGeometry(QtCore.QRect(510, 570, 101, 31))
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_18 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_18.setGeometry(QtCore.QRect(840, 570, 93, 31))
        self.pushButton_18.setObjectName("pushButton_18")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(20, 610, 1000, 200))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setGeometry(QtCore.QRect(620, 50, 101, 31))
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setGeometry(QtCore.QRect(730, 50, 101, 31))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_21.setGeometry(QtCore.QRect(620, 310, 101, 31))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_22 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_22.setGeometry(QtCore.QRect(730, 310, 101, 31))
        self.pushButton_22.setObjectName("pushButton_22")
        self.pushButton_23 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_23.setGeometry(QtCore.QRect(730, 570, 101, 31))
        self.pushButton_23.setObjectName("pushButton_23")
        self.pushButton_24 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_24.setGeometry(QtCore.QRect(620, 570, 101, 31))
        self.pushButton_24.setObjectName("pushButton_24")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1082, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        ###############################################################

        self.figureemg_1 = Figure()
        self.canvasemg_1 = FigureCanvas(self.figureemg_1)
        self.verticalLayout.addWidget(self.canvasemg_1)

        self.figureemg_2 = Figure()
        self.canvasemg_2 = FigureCanvas(self.figureemg_2)
        self.verticalLayout_2.addWidget(self.canvasemg_2)

        self.figureemg_3 = Figure()
        self.canvasemg_3 = FigureCanvas(self.figureemg_3)
        self.verticalLayout_3.addWidget(self.canvasemg_3)

        # For First Signal
        self.pushButton.clicked.connect(self.importImage_1)
        self.pushButton_2.clicked.connect(self.playBack_1)
        self.pushButton_4.clicked.connect(self.ZoomIn_1)
        self.pushButton_5.clicked.connect(self.ZoomOut_1)
        self.pushButton_6.clicked.connect(self.SaveFigure_1)

        # For Second Signal
        self.pushButton_10.clicked.connect(self.importImage_2)
        self.pushButton_9.clicked.connect(self.playBack_2)
        self.pushButton_7.clicked.connect(self.ZoomIn_2)
        self.pushButton_11.clicked.connect(self.ZoomOut_2)
        self.pushButton_12.clicked.connect(self.SaveFigure_2)

        # For Third Signal
        self.pushButton_16.clicked.connect(self.importImage_3)
        self.pushButton_15.clicked.connect(self.playBack_3)
        self.pushButton_13.clicked.connect(self.ZoomIn_3)
        self.pushButton_17.clicked.connect(self.ZoomOut_3)
        self.pushButton_18.clicked.connect(self.SaveFigure_3)

        ###############################################################

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # My Functions
    def importImage_1(self):
        self.img_path_1 = QFileDialog.getOpenFileName(filter="CSV (*.csv)")[0]
        df_1 = pd.read_csv(self.img_path_1)
        self.firstCol_1 = df_1.iloc[:, 0].values
        print(self.firstCol_1)
        self.secondCol_1 = df_1.iloc[:, 1].values
        self.frame_counter_img_1 = 100
        self.flag_img_1 = False

    def playBack_1(self):
        print(self.firstCol_1)
        if not self.flag_img_1:
            self.flag_img_1 = True
            c = self.frame_counter_img_1
            self.figureemg_1.clear()
            lines = [ax.plot([], [])[0] for ax in self.figureemg_1.axes]

            def update(i):
                if not self.flag_img_1:
                    self.ani_emg_1.event_source.stop()
                    self.canvasemg_1.flush_events()
                else:
                    self.frame_counter_img_1 = i + c
                    range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
                    x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
                    y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
                    ax_1 = self.figureemg_1.gca()
                    ax_1.cla()
                    ax_1.set_ylim(min(self.secondCol_1) - 0.5, max(self.secondCol_1) + 0.5)
                    ax_1.set_facecolor((1, 1, 1))
                    ax_1.grid(True)
                    ax_1.plot(x_axis_1, y_axis_1)
                    self.canvasemg_1.draw()
                self.canvasemg_1.flush_events()
                return lines
            self.ani_emg_1 = FuncAnimation(self.figureemg_1, update,
                                           frames=np.arange(0, int(len(self.firstCol_1) / 2) - 100),
                                           interval=10, blit=True)
        else:
            self.flag_img_1 = False

    def ZoomIn_1(self):
        range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
        x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
        y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
        self.figureemg_1.clear()
        ax_1 = self.figureemg_1.add_subplot(111)
        ax_1.set_facecolor((1, 1, 1))
        ax_1.grid(True)
        ax_1.margins(x=-0.3, y=0.05)
        ax_1.plot(x_axis_1, y_axis_1)
        self.canvasemg_1.draw()
        self.canvasemg_1.flush_events()

    def ZoomOut_1(self):
        range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
        x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
        y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
        self.figureemg_1.clear()
        ax_1 = self.figureemg_1.add_subplot(111)
        ax_1.set_facecolor((1, 1, 1))
        ax_1.grid(True)
        ax_1.set_facecolor((1, 1, 1))
        ax_1.grid(True)
        ax_1.margins(x=0.05, y=2)
        ax_1.plot(x_axis_1, y_axis_1)
        self.canvasemg_1.draw()
        self.canvasemg_1.flush_events()

    def SaveFigure_1(self):
        self.figureemg_1.savefig("./Screenshots/First Signal.png")
        print("Figure 1 printed")

    def importImage_2(self):
        self.data_path_2 = QFileDialog.getOpenFileName(filter="CSV (*.csv)")[0]
        df_2 = pd.read_csv(self.data_path_2)
        self.firstCol_2 = df_2.iloc[:, 0].values
        print(self.firstCol_2)
        self.secondCol_2 = df_2.iloc[:, 1].values
        print(self.secondCol_2)
        self.frame_counter_img_2 = 100
        self.flag_img_2 = False

    def playBack_2(self):
        print(self.firstCol_2)
        if not self.flag_img_2:
            self.flag_img_2 = True
            c = self.frame_counter_img_2
            self.figureemg_2.clear()
            lines = [ax.plot([], [])[0] for ax in self.figureemg_2.axes]

            def update(i):
                if not self.flag_img_2:
                    self.ani_img_2.event_source.stop()
                    self.canvasemg_2.flush_events()
                else:
                    self.frame_counter_img_2 = i + c
                    range_min_2 = 2 * int(((self.frame_counter_img_2 - 100) + abs(self.frame_counter_img_2 - 100)) / 2)
                    x_axis_2 = self.firstCol_2[range_min_2:2 * self.frame_counter_img_2]
                    y_axis_2 = self.secondCol_2[range_min_2:2 * self.frame_counter_img_2]
                    ax_2 = self.figureemg_2.gca()
                    ax_2.cla()
                    ax_2.set_ylim(min(self.secondCol_2) - 0.5, max(self.secondCol_2) + 0.5)
                    ax_2.set_facecolor((1, 1, 1))
                    ax_2.grid(True)
                    ax_2.plot(x_axis_2, y_axis_2)
                    self.canvasemg_2.draw()
                self.canvasemg_2.flush_events()
                return lines

            self.ani_img_2 = FuncAnimation(self.figureemg_2, update,
                                           frames=np.arange(0, int(len(self.firstCol_2) / 2) - 100),
                                           interval=10, blit=True)
        else:
            self.flag_img_2 = False

    def ZoomIn_2(self):
        range_min_2 = 2 * int(((self.frame_counter_img_2 - 100) + abs(self.frame_counter_img_2 - 100)) / 2)
        x_axis_2 = self.firstCol_2[range_min_2:2 * self.frame_counter_img_2]
        y_axis_2 = self.secondCol_2[range_min_2:2 * self.frame_counter_img_2]
        self.figureemg_2.clear()
        ax_2 = self.figureemg_2.add_subplot(111)
        ax_2.set_facecolor((1, 1, 1))
        ax_2.grid(True)
        ax_2.margins(x=-0.3, y=0.05)
        ax_2.plot(x_axis_2, y_axis_2)
        self.canvasemg_2.draw()
        self.canvasemg_2.flush_events()
        print(range_min_2)

    def ZoomOut_2(self):
        range_min_2 = 2 * int(((self.frame_counter_img_2 - 100) + abs(self.frame_counter_img_2 - 100)) / 2)
        x_axis_2 = self.firstCol_2[range_min_2:2 * self.frame_counter_img_2]
        y_axis_2 = self.secondCol_2[range_min_2:2 * self.frame_counter_img_2]
        self.figureemg_2.clear()
        ax_2 = self.figureemg_2.add_subplot(111)
        ax_2.set_facecolor((1, 1, 1))
        ax_2.grid(True)
        ax_2.set_facecolor((1, 1, 1))
        ax_2.grid(True)
        ax_2.margins(x=0.05, y=2)
        ax_2.plot(x_axis_2, y_axis_2)
        self.canvasemg_2.draw()
        self.canvasemg_2.flush_events()

    def SaveFigure_2(self):
        self.figureemg_2.savefig("./Screenshots/Second Signal.png")
        print("Figure 2 printed")

    def importImage_3(self):
        self.data_path_3 = QFileDialog.getOpenFileName(filter="CSV (*.csv)")[0]
        df_3 = pd.read_csv(self.data_path_3)
        self.firstCol_3 = df_3.iloc[:, 0].values
        print(self.firstCol_3)
        self.secondCol_3 = df_3.iloc[:, 1].values
        self.frame_counter_img_3 = 100
        self.flag_img_3 = False

    def playBack_3(self):
        print(self.firstCol_3)
        if not self.flag_img_3:
            self.flag_img_3 = True
            c = self.frame_counter_img_3
            self.figureemg_3.clear()
            lines = [ax.plot([], [])[0] for ax in self.figureemg_3.axes]

            def update(i):
                if not self.flag_img_3:
                    self.ani_img_3.event_source.stop()
                    self.canvasemg_3.flush_events()
                else:
                    self.frame_counter_img_3 = i + c
                    range_min_3 = 2 * int(((self.frame_counter_img_3 - 100) + abs(self.frame_counter_img_3 - 100)) / 2)
                    x_axis_3 = self.firstCol_3[range_min_3:2 * self.frame_counter_img_3]
                    y_axis_3 = self.secondCol_3[range_min_3:2 * self.frame_counter_img_3]
                    ax_3 = self.figureemg_3.gca()
                    ax_3.cla()
                    ax_3.set_ylim(min(self.secondCol_3) - 0.5, max(self.secondCol_3) + 0.5)
                    ax_3.set_facecolor((1, 1, 1))
                    ax_3.grid(True)
                    ax_3.plot(x_axis_3, y_axis_3)
                    self.canvasemg_3.draw()
                self.canvasemg_3.flush_events()
                return lines
            self.ani_img_3 = FuncAnimation(self.figureemg_3, update,
                                           frames=np.arange(0, int(len(self.firstCol_3) / 2) - 100),
                                           interval=10, blit=True)
        else:
            self.flag_img_3 = False

    def ZoomIn_3(self):
        range_min_3 = 2 * int(((self.frame_counter_img_3 - 100) + abs(self.frame_counter_img_3 - 100)) / 2)
        x_axis_3 = self.firstCol_3[range_min_3:2 * self.frame_counter_img_3]
        y_axis_3 = self.secondCol_3[range_min_3:2 * self.frame_counter_img_3]
        self.figureemg_3.clear()
        ax_3 = self.figureemg_3.add_subplot(111)
        ax_3.set_facecolor((1, 1, 1))
        ax_3.grid(True)
        ax_3.margins(x=-0.3, y=0.05)
        ax_3.plot(x_axis_3, y_axis_3)
        self.canvasemg_3.draw()
        self.canvasemg_3.flush_events()
        print(range_min_3)

    def ZoomOut_3(self):
        range_min_3 = 2 * int(((self.frame_counter_img_3 - 100) + abs(self.frame_counter_img_3 - 100)) / 2)
        x_axis_3 = self.firstCol_3[range_min_3:2 * self.frame_counter_img_3]
        y_axis_3 = self.secondCol_3[range_min_3:2 * self.frame_counter_img_3]
        self.figureemg_3.clear()
        ax_3 = self.figureemg_3.add_subplot(111)
        ax_3.set_facecolor((1, 1, 1))
        ax_3.grid(True)
        ax_3.set_facecolor((1, 1, 1))
        ax_3.grid(True)
        ax_3.margins(x=0.05, y=2)
        ax_3.plot(x_axis_3, y_axis_3)
        self.canvasemg_3.draw()
        self.canvasemg_3.flush_events()

    def SaveFigure_3(self):
        self.figureemg_3.savefig("./Screenshots/Third Signal.png")
        print("Figure 3 printed")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.label.setText(_translate("MainWindow", "First Signal:"))
        self.label_2.setText(_translate("MainWindow", "Write signal name"))
        self.pushButton_2.setText(_translate("MainWindow", "Start"))
        self.pushButton_4.setText(_translate("MainWindow", "Zoom-In"))
        self.pushButton_5.setText(_translate("MainWindow", "Zoom-Out"))
        self.pushButton_3.setText(_translate("MainWindow", "Add Signal Name"))
        self.pushButton_6.setText(_translate("MainWindow", "Print"))
        self.label_3.setText(_translate("MainWindow", "Write signal name"))
        self.label_4.setText(_translate("MainWindow", "Second Signal:"))
        self.pushButton_7.setText(_translate("MainWindow", "Zoom-In"))
        self.pushButton_8.setText(_translate("MainWindow", "Add Signal Name"))
        self.pushButton_9.setText(_translate("MainWindow", "Start"))
        self.pushButton_10.setText(_translate("MainWindow", "Open"))
        self.pushButton_11.setText(_translate("MainWindow", "Zoom-Out"))
        self.pushButton_12.setText(_translate("MainWindow", "Print"))
        self.label_5.setText(_translate("MainWindow", "Write signal name"))
        self.label_6.setText(_translate("MainWindow", "Third Signal:"))
        self.pushButton_13.setText(_translate("MainWindow", "Zoom-In"))
        self.pushButton_14.setText(_translate("MainWindow", "Add Signal Name"))
        self.pushButton_15.setText(_translate("MainWindow", "Start"))
        self.pushButton_16.setText(_translate("MainWindow", "Open"))
        self.pushButton_17.setText(_translate("MainWindow", "Zoom-Out"))
        self.pushButton_18.setText(_translate("MainWindow", "Print"))
        self.pushButton_19.setText(_translate("MainWindow", "Forward"))
        self.pushButton_20.setText(_translate("MainWindow", "Backword"))
        self.pushButton_21.setText(_translate("MainWindow", "Forward"))
        self.pushButton_22.setText(_translate("MainWindow", "Backword"))
        self.pushButton_23.setText(_translate("MainWindow", "Backword"))
        self.pushButton_24.setText(_translate("MainWindow", "Forward"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

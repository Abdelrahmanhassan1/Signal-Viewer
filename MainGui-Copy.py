# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\IsaWorking-Copy.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
#from PyQt5.QtGui import QFileDialog
from PyQt5.QtWidgets import QFileDialog
import sys
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import matplotlib.pyplot as plt
import random
import pandas as pd
from matplotlib.animation import FuncAnimation
import time
import numpy as np
from matplotlib.figure import Figure
import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1082, 849)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 90, 1011, 391))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 50, 101, 31))
        self.pushButton.setStyleSheet("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(270, 50, 101, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(380, 20, 101, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(380, 50, 101, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(590, 20, 111, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(710, 50, 93, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setGeometry(QtCore.QRect(480, 20, 101, 31))
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setGeometry(QtCore.QRect(480, 50, 101, 31))
        self.pushButton_20.setObjectName("pushButton_20")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(130, 50, 121, 31))
        self.comboBox.setObjectName("comboBox")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(590, 61, 113, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(20, 540, 1011, 201))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(220, 760, 160, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(710, 760, 160, 22))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(70, 500, 121, 31))
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(200, 500, 93, 28))
        self.pushButton_7.setObjectName("pushButton_7")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(810, 50, 131, 31))
        self.comboBox_3.setObjectName("comboBox_3")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(300, 500, 93, 28))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(480, 490, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 20, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(810, 20, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1082, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        ##########################################################
        self.min_slider = 0
        self.avg_slider = (1999 - 1) // 2
        self.max_slider = 1999
        self.speed = 10

        self.combo_items = ["channel_1", "channel_2", "channel_3"]
        self.comboBox.addItems(self.combo_items)
        self.comboBox_2.addItems(self.combo_items)

        self.combo_items_2 = ["theme_1", "theme_2", "theme_3"]
        self.comboBox_3.addItems(self.combo_items_2)

        self.figureemg_1 = Figure()
        self.canvasemg_1 = FigureCanvas(self.figureemg_1)
        self.verticalLayout.addWidget(self.canvasemg_1)

        self.figure_2 = Figure()
        self.figure_canvas_2 = FigureCanvas(self.figure_2)
        self.verticalLayout_2.addWidget(self.figure_canvas_2)

        self.horizontalSlider.setMinimum(self.min_slider)
        self.horizontalSlider.setMaximum(self.avg_slider - 1)

        self.horizontalSlider_2.setMinimum(self.avg_slider + 1)
        self.horizontalSlider_2.setMaximum(self.max_slider)

        self.pushButton.clicked.connect(self.importImage_1)
        self.pushButton_2.clicked.connect(self.playBack_1)
        self.pushButton_4.clicked.connect(self.ZoomIn_1)
        self.pushButton_5.clicked.connect(self.ZoomOut_1)
        self.pushButton_3.clicked.connect(self.add_label)
        self.pushButton_7.clicked.connect(self.spectrogram)
        self.pushButton_19.clicked.connect(self.increase_speed)
        self.pushButton_20.clicked.connect(self.decrease_speed)
        self.pushButton_6.clicked.connect(lambda: self.SaveFigure("Signals"))
        self.pushButton_8.clicked.connect(lambda: self.SaveFigure("Spectrogram"))

    def importImage_1(self):
        self.img_path_1 = QFileDialog.getOpenFileName(filter="CSV (*.csv)")[0]
        df_1 = pd.read_csv(self.img_path_1)
        self.firstCol_1 = df_1.iloc[:, 0].values
        print(self.firstCol_1)
        self.secondCol_1 = df_1.iloc[:, 1].values
        self.frame_counter_img_1 = 100
        self.flag_img_1 = False

    def playBack_1(self):
        try:
            print(self.firstCol_1)
            if not self.flag_img_1:
                self.flag_img_1 = True
                c = self.frame_counter_img_1
                self.figureemg_1.clear()
                lines = [ax.plot([], [])[0] for ax in self.figureemg_1.axes]

                def update(i):
                    if not self.flag_img_1:
                        self.ani_emg_1.event_source.stop()
                        self.canvasemg_1.flush_events()
                    else:
                        self.frame_counter_img_1 = i + c
                        range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
                        x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
                        y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
                        ax_1 = self.figureemg_1.gca()
                        ax_1.cla()
                        ax_1.set_ylim(min(self.secondCol_1) - 0.5, max(self.secondCol_1) + 0.5)
                        ax_1.set_facecolor((1, 1, 1))
                        ax_1.grid(True)
                        ax_1.plot(x_axis_1, y_axis_1)
                        self.canvasemg_1.draw()
                    self.canvasemg_1.flush_events()
                    return lines
                self.ani_emg_1 = FuncAnimation(self.figureemg_1, update,
                                               frames=np.arange(0, int(len(self.firstCol_1) / 2) - 100),
                                               interval=self.speed, blit=True)
            else:
                self.flag_img_1 = False
        except Exception as e:
            print(e)
    def ZoomIn_1(self):
        try:
            range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
            x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
            y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
            self.figureemg_1.clear()
            ax_1 = self.figureemg_1.add_subplot(111)
            ax_1.set_facecolor((1, 1, 1))
            ax_1.grid(True)
            ax_1.margins(x=-0.3, y=0.05)
            ax_1.plot(x_axis_1, y_axis_1)
            self.canvasemg_1.draw()
            self.canvasemg_1.flush_events()
        except Exception as e:
            print(e)
    def ZoomOut_1(self):
        try:
            range_min_1 = 2 * int(((self.frame_counter_img_1 - 100) + abs(self.frame_counter_img_1 - 100)) / 2)
            x_axis_1 = self.firstCol_1[range_min_1:2 * self.frame_counter_img_1]
            y_axis_1 = self.secondCol_1[range_min_1:2 * self.frame_counter_img_1]
            self.figureemg_1.clear()
            ax_1 = self.figureemg_1.add_subplot(111)
            ax_1.set_facecolor((1, 1, 1))
            ax_1.grid(True)
            ax_1.set_facecolor((1, 1, 1))
            ax_1.grid(True)
            ax_1.margins(x=0.05, y=2)
            ax_1.plot(x_axis_1, y_axis_1)
            self.canvasemg_1.draw()
            self.canvasemg_1.flush_events()
        except Exception as e:
            print(e)
    def increase_speed(self):
        if self.speed < 5:
            self.speed = 5
            print("reached the limits")
        else:
            self.speed -= 8
        print(self.speed)

    def decrease_speed(self):
        if self.speed > 300:
            self.speed = 300
            print("reached the limits")
        else:
            self.speed += 25
        print(self.speed)

    def add_label(self):
        txt = self.lineEdit.text()
        current_item = self.comboBox.currentText()
        index = self.combo_items.index(current_item)
        self.combo_items[index] = txt
        self.comboBox.clear()
        self.comboBox_2.clear()
        self.comboBox.addItems(self.combo_items)
        self.comboBox_2.addItems(self.combo_items)
        self.lineEdit.clear()

    def spectrogram(self):
        try:
            self.min = self.horizontalSlider.value()
            self.max = self.horizontalSlider_2.value()
            ax = self.figure_2.gca()
            ax.cla()
            ax.set_ylim(self.min, self.max)
            ax.set_xlim(self.min, self.max)
            data = self.secondCol_1[self.min: self.max]
            ax.specgram(data, Fs=30, cmap="rainbow")
            self.figure_canvas_2.draw()
            self.figure_canvas_2.flush_events()
        except Exception as e:
            print(e)

    def SaveFigure(self, folder):
        if folder == "Signals":
            self.figureemg_1.savefig(f"./Screenshots/{folder}/Signal.pdf", bbox_inches='tight')
            print("Figure printed")
        elif folder == "Spectrogram":
            self.figure_2.savefig(f"./Screenshots/{folder}/{folder.lower()}.pdf", bbox_inches='tight')
            print("Figure printed")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton_2.setText(_translate("MainWindow", "Start"))
        self.pushButton_4.setText(_translate("MainWindow", "Zoom-In"))
        self.pushButton_5.setText(_translate("MainWindow", "Zoom-Out"))
        self.pushButton_3.setText(_translate("MainWindow", "Add Signal Name"))
        self.pushButton_6.setText(_translate("MainWindow", "Print"))
        self.pushButton_19.setText(_translate("MainWindow", "Speed +"))
        self.pushButton_20.setText(_translate("MainWindow", "Speed -"))
        self.pushButton_7.setText(_translate("MainWindow", "Show"))
        self.pushButton_8.setText(_translate("MainWindow", "Print"))
        self.label.setText(_translate("MainWindow", "Spectrogram"))
        self.label_2.setText(_translate("MainWindow", "Change Signal"))
        self.label_3.setText(_translate("MainWindow", "Change Theme"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
